{"version":3,"file":"static/js/808.ab128eb1.chunk.js","mappings":"kOAEaA,GAAQC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,iGAMLE,EAAQF,EAAAA,GAAAA,MAAH,0HAIC,SAAAG,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,G,kICLdC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAAaG,WACnBC,MAAOJ,EAAAA,KAAaK,IAAI,GAAGC,IAAI,IAAIH,WACnCI,SAAUP,EAAAA,KAAaK,IAAI,GAAGC,IAAI,IAAIH,WACtCK,gBAAiBR,EAAAA,KAEdS,MAAM,CAACT,EAAAA,GAAQ,YAAa,MAAO,0BAGlCU,EAAgB,CACpBR,KAAM,GACNK,SAAU,GACVC,gBAAiB,GACjBJ,MAAO,IAGIO,EAAe,WAC1B,IAAMC,GAAUC,EAAAA,EAAAA,MAchB,OACE,SAAC,KAAD,CACEH,cAAeA,EACfI,SAhBiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAGxBC,EAAU,CACdf,KAHgCa,EAA1Bb,KAINE,MAJgCW,EAApBX,MAKZG,SALgCQ,EAAbR,UAOrBW,QAAQC,IAAIF,GACZL,GAAQQ,EAAAA,EAAAA,IAASH,IACjBD,GACD,EAMGK,iBAAkBtB,EAHpB,UAKE,UAAC,IAAD,CAAOuB,aAAa,MAApB,WACE,UAAC,IAAD,CAAOC,QAAQ,QAAf,WACE,oCADF,KACqB,SAAC,KAAD,CAAOC,KAAK,OAAOtB,KAAK,UAC3C,SAAC,KAAD,CAAcA,KAAK,aAErB,UAAC,IAAD,CAAOqB,QAAQ,QAAf,WACE,oCADF,KACqB,SAAC,KAAD,CAAOC,KAAK,OAAOtB,KAAK,WAC3C,SAAC,KAAD,CAAcA,KAAK,WACnB,SAAC,KAAD,CAAcA,KAAK,cAErB,UAAC,IAAD,CAAOqB,QAAQ,WAAf,WACE,uCADF,KACwB,SAAC,KAAD,CAAOC,KAAK,WAAWtB,KAAK,cAClD,SAAC,KAAD,CAAcA,KAAK,iBAErB,UAAC,IAAD,CAAOqB,QAAQ,WAAf,WACE,uCADF,KACwB,SAAC,KAAD,CAAOC,KAAK,WAAWtB,KAAK,qBAClD,SAAC,KAAD,CAAcA,KAAK,wBAGrB,mBAAQsB,KAAK,SAAb,wBAIP,EC7DD,EAJiB,WACf,OAAO,SAACb,EAAD,GACR,C","sources":["components/form/registrationForm/registration.styled.jsx","components/form/registrationForm/registerationForm.js","page/register.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Form } from 'formik';\nexport const Forma = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-bottom: ${p => p.theme.space[2]}px;\n`;\n","import { Formik, Field, ErrorMessage } from 'formik';\nimport { register } from 'redux/operations';\nimport { useDispatch } from 'react-redux';\nimport * as yup from 'yup';\n\nimport { Label, Forma } from './registration.styled';\n\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  email: yup.string().min(6).max(30).required(),\n  password: yup.string().min(6).max(16).required(),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Passwords must match'),\n});\n\nconst initialValues = {\n  name: '',\n  password: '',\n  confirmPassword: '',\n  email: '',\n};\n\nexport const Registration = () => {\n  const dispath = useDispatch();\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, email, password } = values;\n\n    const newUser = {\n      name,\n      email,\n      password,\n    };\n    console.log(newUser);\n    dispath(register(newUser));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <Forma autoComplete=\"off\">\n        <Label htmlFor=\"login\">\n          <span>Login</span> <Field type=\"text\" name=\"name\" />\n          <ErrorMessage name=\"name\" />\n        </Label>\n        <Label htmlFor=\"email\">\n          <span>Email</span> <Field type=\"text\" name=\"email\" />\n          <ErrorMessage name=\"email\" />\n          <ErrorMessage name=\"email\" />\n        </Label>\n        <Label htmlFor=\"password\">\n          <span>Password</span> <Field type=\"password\" name=\"password\" />\n          <ErrorMessage name=\"password\" />\n        </Label>\n        <Label htmlFor=\"password\">\n          <span>Password</span> <Field type=\"password\" name=\"confirmPassword\" />\n          <ErrorMessage name=\"confirmPassword\" />\n        </Label>\n\n        <button type=\"submit\">Submit</button>\n      </Forma>\n    </Formik>\n  );\n};\n","import { Registration } from 'components/form/registrationForm/registerationForm';\n\nconst Register = () => {\n  return <Registration />;\n};\n\nexport default Register;\n"],"names":["Forma","styled","Form","Label","p","theme","space","schema","yup","shape","name","required","email","min","max","password","confirmPassword","oneOf","initialValues","Registration","dispath","useDispatch","onSubmit","values","resetForm","newUser","console","log","register","validationSchema","autoComplete","htmlFor","type"],"sourceRoot":""}