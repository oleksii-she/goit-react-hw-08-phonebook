{"version":3,"file":"static/js/651.32f1cc5b.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/form/contactsForm/form.styled.jsx","redux/selectors.js","components/form/contactsForm/form.jsx","components/filter/filter.styled.jsx","components/filter/Filter.jsx","components/contacts/contacts.styled.jsx","components/contacts/contactsItem.jsx","components/contacts/contactsList.jsx","page/contacts.js"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-bottom: ${p => p.theme.space[3]}px;\n  &:last-child {\n    margin-bottom: ${p => p.theme.space[0]}px;\n  }\n`;\n\nexport const Button = styled.button`\n  border-radius: ${p => p.theme.space[1]}px;\n  border: none;\n  padding: ${p => p.theme.space[2]}px;\n  cursor: pointer;\n  &:hover {\n    background-color: ${p => p.theme.colors.primary};\n    transition: cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  }\n`;\n","export const getContacts = state => state.contacts.items;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getFilter = state => state.filter;\n","import { Formik, Form, Field } from 'formik';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { Label, Button } from './form.styled';\nimport { getContacts } from 'redux/selectors';\nimport { addContacts } from 'redux/operations';\n\nexport const FormData = () => {\n  const dispatch = useDispatch();\n  const items = useSelector(getContacts);\n  const nameId = nanoid();\n  const tagInputId = nanoid();\n  const id = nanoid();\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    const { name, number } = values;\n\n    const newContacts = {\n      id,\n      name,\n      number,\n    };\n    if (items.find(contact => contact.name === name)) {\n      return alert(`${name} is already exist!`);\n    }\n    dispatch(addContacts(newContacts));\n\n    resetForm();\n  };\n\n  return (\n    <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n      <Form action=\"\">\n        <Label htmlFor={nameId}>\n          Name\n          <Field\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            id={tagInputId}\n            required\n          />\n        </Label>\n        <Label htmlFor={nameId}>\n          Number\n          <Field\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            id={tagInputId}\n            required\n          />\n        </Label>\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-bottom: ${p => p.theme.space[3]}px;\n  &:last-child {\n    margin-bottom: ${p => p.theme.space[0]}px;\n  }\n`;\n","import { Label } from './filter.styled';\nimport { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice';\n\nexport const Filter = () => {\n  const dispath = useDispatch();\n\n  return (\n    <Label htmlFor=\"\">\n      Find contacts by name\n      <input type=\"text\" onChange={e => dispath(setFilter(e.target.value))} />\n    </Label>\n  );\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding: ${p => p.theme.space[0]}px;\n`;\nexport const Item = styled.li`\n  width: 270px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: ${p => p.theme.space[2]}px;\n  &:last-child {\n    margin-bottom: ${p => p.theme.space[0]}px;\n  }\n`;\n\nexport const Button = styled.button`\n  border-radius: ${p => p.theme.space[1]}px;\n  border: none;\n  padding: ${p => p.theme.space[1]}px;\n  padding-left: ${p => p.theme.space[2]}px;\n  padding-right: ${p => p.theme.space[2]}px;\n  font-size: small;\n  cursor: pointer;\n\n  &:hover {\n    background-color: ${p => p.theme.colors.primary};\n    transition: cubic-bezier(0.175, 0.885, 0.32, 1.275);\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Item, Button } from './contacts.styled';\n\nexport const ContactsItem = ({ name, number, onClick }) => {\n  return (\n    <Item>\n      {name}:<span>{number}</span>\n      <Button onClick={onClick}>Dellete</Button>\n    </Item>\n  );\n};\n\nContactsItem.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n","import { ContactsItem } from './contactsItem';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { List } from './contacts.styled';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport { deleteContacts } from 'redux/operations';\nexport const ContactsList = () => {\n  const items = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const FindContact = () => {\n    const normalizedfilter = filter.toLowerCase();\n\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedfilter)\n    );\n  };\n\n  const contactsData = FindContact();\n\n  return (\n    <List>\n      {contactsData.map(data => (\n        <ContactsItem\n          key={data.id}\n          name={data.name}\n          number={data.number}\n          onClick={() => dispatch(deleteContacts(data.id))}\n        />\n      ))}\n    </List>\n  );\n};\n","import { FormData } from 'components/form/contactsForm/form';\nimport { Filter } from 'components/filter/Filter';\nimport { ContactsList } from 'components/contacts/contactsList';\n\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/operations';\nimport { getError, getIsLoading } from 'redux/selectors';\n\nconst Contacts = () => {\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <FormData />\n      <h2>Contacts</h2>\n      {isLoading && !error && <b>Request in progress...</b>}\n      <Filter />\n      <ContactsList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","Label","styled","p","theme","space","Button","colors","primary","getContacts","state","contacts","items","getIsLoading","isLoading","getError","error","getFilter","filter","FormData","dispatch","useDispatch","useSelector","nameId","tagInputId","initialValues","name","number","onSubmit","values","resetForm","newContacts","find","contact","alert","addContacts","action","htmlFor","type","pattern","title","required","Filter","dispath","onChange","e","setFilter","target","value","List","Item","ContactsItem","onClick","ContactsList","contactsData","normalizedfilter","toLowerCase","includes","FindContact","map","data","deleteContacts","useEffect","fetchContacts"],"sourceRoot":""}